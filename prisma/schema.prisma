generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String            @unique
  password       String?
  image          String?
  emailVerified  DateTime?
  githubUsername String?
  bio            String?
  links          Json?
  role           Role              @default(USER)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  accounts       Account[]
  projects       Project[]
  interests      ProjectInterest[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String            @id @default(cuid())
  title          String
  description    String
  requirements   String
  techStack      String[]
  teamSize       Int
  timeframe      String
  difficulty     String
  category       String
  commitment     String
  communication  String
  githubRequired Boolean
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  creatorId      String
  creator        User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  interests      ProjectInterest[]
}

model ProjectInterest {
  id        String         @id @default(cuid())
  userId    String
  projectId String
  status    InterestStatus @default(PENDING)
  message   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

enum Role {
  USER
  ADMIN
}

enum InterestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
